"use strict";var precacheConfig=[["/react-native-animations-talk/index.html","6ed605adb54d8f435725067fe43bb0d6"],["/react-native-animations-talk/static/css/main.653da357.css","521def3ae35e5b12d25e0300c45174f2"],["/react-native-animations-talk/static/js/main.d1a5a8e9.js","45d090fe30ce4d88771b679fad25a90e"],["/react-native-animations-talk/static/media/basic.a0572fe6.png","a0572fe66f4a59428c90d9b4f3632a60"],["/react-native-animations-talk/static/media/basic.f7e055f5.webm","f7e055f5dd0f71340b6cb04b76c9c3ea"],["/react-native-animations-talk/static/media/button.a59937bc.png","a59937bc8e0ce16ca5d9ee1bdf329d31"],["/react-native-animations-talk/static/media/gesture.9ca3adb5.webm","9ca3adb5e246061b4eb38ca31dcf8e44"],["/react-native-animations-talk/static/media/gestureopacity.9bd10045.webm","9bd100450dad3489b8b80cf347abee4e"],["/react-native-animations-talk/static/media/gesturespring.d67ac5e3.webm","d67ac5e34b48528f65b3256f3669013a"],["/react-native-animations-talk/static/media/headshot.6704e617.jpg","6704e617805ceba1f732b31b0a7e57b6"],["/react-native-animations-talk/static/media/lottie-examples.a99333d9.gif","a99333d9a6f1b9276f8ba61038590b56"],["/react-native-animations-talk/static/media/opacityinterp.8c7cefbd.webm","8c7cefbd876a16db4785981b33e7b323"],["/react-native-animations-talk/static/media/space.58978bea.jpg","58978bea88d3126a67175d055748bce9"],["/react-native-animations-talk/static/media/xyinterp.759bb90a.webm","759bb90acf855cd25d1198e87846a84e"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(t){return t.redirected?("body"in t?Promise.resolve(t.body):t.blob()).then(function(e){return new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})}):Promise.resolve(t)},createCacheKey=function(e,t,a,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(t){return a.every(function(e){return!e.test(t[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),r=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),r]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(n){return setOfCachedUrls(n).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var e=new Request(t,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+t+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return n.put(t,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(t){return t.keys().then(function(e){return Promise.all(e.map(function(e){if(!a.has(e.url))return t.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(t){if("GET"===t.request.method){var e,a=stripIgnoredUrlParameters(t.request.url,ignoreUrlParametersMatching),n="index.html";(e=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),e=urlsToCacheKeys.has(a));var r="/react-native-animations-talk/index.html";!e&&"navigate"===t.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],t.request.url)&&(a=new URL(r,self.location).toString(),e=urlsToCacheKeys.has(a)),e&&t.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',t.request.url,e),fetch(t.request)}))}});